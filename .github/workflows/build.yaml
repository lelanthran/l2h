name: Build and Release on Tag Push

on:
  push:
    tags:
      - '*'

env:
  TARGET: UNSET
  COMPILER_NAME: UNSET
  COMPILER_VERSION: UNSET

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-20.04

    outputs:
      TARGET: ${{ steps.set_variable.outputs.TARGET }}
      COMPILER_NAME: ${{ steps.set_variable.outputs.COMPILER_NAME }}
      COMPILER_VERSION: ${{ steps.set_variable.outputs.COMPILER_VERSION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Make
        run: sudo apt-get install build-essential

      - name: Build Project
        run: make

      - name: Upload Artifact
        id: upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: l2h-binary
          path: l2h

      - name: Upload Buildinfo
        id: upload-buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: buildinfo
          path: buildinfo.txt

  release:
    needs: build
    name: Create Release
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Download Buildinfo
        id: download-buildinfo
        uses: actions/download-artifact@v2
        with:
          name: buildinfo
          path: .

      - name: Set Buildinfo Vars
        id: set-buildinfo-vars
        run: cat buildinfo.txt >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release $TARGET-${{ github.ref }}
          draft: false
          prerelease: false

      - name: Download Release Asset
        id: download-release-asset
        uses: actions/download-artifact@v2
        with:
          name: l2h-binary
          path: .

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: l2h
          asset_name: l2h-binary
          asset_content_type: application/octet-stream

